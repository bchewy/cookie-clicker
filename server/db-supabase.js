const { createClient } = require('@supabase/supabase-js');
const { SUPABASE_URL, SUPABASE_ANON_KEY } = require('./config');

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Initialize database - run this once to create the table
async function initializeDatabase() {
  // This would typically be done through Supabase's interface
  // but here's the SQL for reference:
  /*
  create table players (
    id bigint generated by default as identity primary key,
    username text unique not null,
    password text not null,
    cookies float8 default 0,
    cookies_per_second float8 default 0,
    last_updated timestamp with time zone default timezone('utc'::text, now())
  );
  */
}

const dbWrapper = {
  getPlayer: async (username, password) => {
    const { data, error } = await supabase
      .from('players')
      .select('*')
      .eq('username', username)
      .eq('password', password)
      .single();

    if (error) throw error;
    return data ? {
      ...data,
      cookiesPerSecond: data.cookies_per_second
    } : null;
  },

  registerPlayer: async (username, password) => {
    const { data, error } = await supabase
      .from('players')
      .insert([
        { 
          username, 
          password,
          cookies: 0,
          cookies_per_second: 0
        }
      ])
      .select()
      .single();

    if (error) throw error;
    return {
      ...data,
      cookiesPerSecond: data.cookies_per_second
    };
  },

  updatePlayer: async (username, cookies, cookiesPerSecond) => {
    const { error } = await supabase
      .from('players')
      .update({ 
        cookies,
        cookies_per_second: cookiesPerSecond,
        last_updated: new Date().toISOString()
      })
      .eq('username', username);

    if (error) throw error;
  },

  getLeaderboard: async () => {
    const { data, error } = await supabase
      .from('players')
      .select('username, cookies, cookies_per_second')
      .order('cookies', { ascending: false })
      .limit(10);

    if (error) throw error;
    return data.map(player => ({
      ...player,
      cookiesPerSecond: player.cookies_per_second
    }));
  },

  checkUsername: async (username) => {
    const { data, error } = await supabase
      .from('players')
      .select('id')
      .eq('username', username)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return !!data;
  }
};

module.exports = dbWrapper;
